events {
    worker_connections 1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    server_tokens off;

    # SSL optimization
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
    limit_req_status 429;

    # Cache settings
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=static_cache:10m inactive=60m use_temp_path=off;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # HTTP server for redirection and certbot challenges
    server {
        listen 80;
        server_name parqlive.com www.parqlive.com;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://www.parqlive.com$request_uri;
        }
    }


    server {
        listen 443 ssl http2;   # Added http2 here
        server_name parqlive.com;

        ssl_certificate /etc/letsencrypt/live/parqlive.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/parqlive.com/privkey.pem;
        include /etc/nginx/ssl_options.conf;

         # Redirect all requests to https://www.parqlive.com preserving path/query
        return 301 https://www.parqlive.com$request_uri;
    }


    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name  www.parqlive.com;

        ssl_certificate /etc/letsencrypt/live/parqlive.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/parqlive.com/privkey.pem;
        include /etc/nginx/ssl_options.conf;

        # Static files
        location /static/ {
            alias /var/www/static/;
            expires 30d;
            access_log off;
            add_header Cache-Control "public";
        }

        # WebSocket support
        location /socket.io/ {
            proxy_pass http://flask:5000/socket.io/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Flask application
        location / {
            proxy_pass http://flask:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}